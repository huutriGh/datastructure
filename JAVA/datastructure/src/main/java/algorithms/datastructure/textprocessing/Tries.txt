Let S be a set of string from aphabet Σ such that no string in S is a prefix of another string.
A standart Trie for S is an ordered tree T with the following properties:

    * Each node T, except root, is labeled with a character of Σ.
    * The children of an internal node of T have distinct labels.
    * T have s leaves, each associated with a string of S, such that the concatenation of labels of the nodes on path from the root to a leaf v of T yields the
      string of S associated with v.
    * The height of T is equal to the length of the longest string S.
    * Every internal node of T has at most |Σ| children.
    * The number of node of T is at most n+1.
The worst case for the number of nodes of a tries occurs when no two strings share a commom noempty prefix
that is, except for the root, all internal nodes have one child.


cons:
    * There is potential space ineffciency in standard Trie: There are potential a lot of nodes that have only one child, 
    and the existence of such nodes is a waste. 


========================================================================
Compressed tries

A Compressed trie is semilar to a standard trie but is ensures that each internal in the trie has at least two children.
It enforces this rule by compressing chain of single-child node in to individual edges.
    * Every node of T has at least to children and most d children
    * T have s leaves
    * The number of nodes of T is O(s)
    * A Compressed trie is truly advantangeous only when it is used as an auxiliary index structure over a collection of strings already stored in a primary
    structure, and is not required to actually store all the character of the strings in the collection.
========================================================================
Suffix tries

One of the primary aplications for tries is for the case when the string in th collection S are all the suffixes of a string X.
Such a trie is called the suffix trie (or position tree) of string X.
